// See https://aka.ms/new-console-template for more information
using OfficeOpenXml;
using System;
using System.Globalization;
using Microsoft.Office.Interop.Excel;

namespace OptionPricer
{
    class Program
    {
        static async Task Main(string[] args)
        {
            CultureInfo culture = new CultureInfo("es-ES");

            Console.WriteLine("Enter _Ticker_:");
            string user_ticker = Console.ReadLine().ToUpper();
            Console.WriteLine("Enter option type");
            string user_op_type = Console.ReadLine().ToUpper();
            Console.WriteLine("Enter option strike price");
            double op_price = double.Parse(Console.ReadLine());

            //Enter day of entry of option
            Console.WriteLine("Enter option start date: dd/mm/yyyy");
            String myStartDate = Console.ReadLine();
            DateTime start_date = DateTime.Parse(myStartDate, culture);
            var user_start_date = start_date.ToString("dd-MMM-yyyy");

            //Enter option exercise date
            Console.WriteLine("Enter option end date: dd/mm/yyyy");
            String myEndDate = Console.ReadLine();
            DateTime end_date = DateTime.Parse(myEndDate, culture);
            var user_end_date = end_date.ToString("dd-MMM-yyyy");

            //Calculate the days to maturity of the option:
            TimeSpan interval = end_date - start_date;
            double days = (double)interval.TotalDays;
                
            Console.WriteLine($"{ days}");

            var europeanOption = new EuropeanOption(user_ticker,op_price,user_op_type,days);


            ExcelPackage.LicenseContext = LicenseContext.Commercial;

            //Change this file path...
            var path = new FileInfo(@"C:\Users\ClaverKwenzongo\OneDrive - Riskworx Pty Ltd\Desktop\Demo\Market Data.xlsx");

            //Get the share price corresponding to the _Ticker_ entered by the user and the time to maturity of the option.//
            List<SharePriceData> marketDatas = await LoadExcelFile(path, user_ticker.ToUpper(), user_start_date, days);

            foreach (SharePriceData marketData in marketDatas)
            {
                Console.WriteLine($"The share price is {marketData.SharePrice}");
                Console.WriteLine($"The risk free rate is {marketData.riskFree}");
            }
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        }
 ///////////Get the share price from the excel file.
        private static async Task<List<SharePriceData>> LoadExcelFile(FileInfo path, string shareName, string date, double maturity)
        {
            List<SharePriceData> result = new();
            using var package = new ExcelPackage(path);


            await package.LoadAsync(path);

            //Get the worksheet with the share prices
            var ws = package.Workbook.Worksheets[0];

            //Get the worksheet with the interest rates
            var ws_rates = package.Workbook.Worksheets[1];

            //Get the worksheet with volatilities
            var ws_vol = package.Workbook.Worksheets[2];

            //Get the worksheet with the divident yields
            var ws_div = package.Workbook.Worksheets[3];
            
 ///////////////This method allows us to convert the dates from the excel sheet in a format that can be compared with the date the user inputs.
 ///This line of code is not included in the getDateRow method because, we need to reuse it for getting share prices
            static DateTime getDate(string _date)
            {
                CultureInfo cultureInfo = new CultureInfo("en-US");
                DateTime wsDate = DateTime.Parse(_date, cultureInfo);

                return wsDate;
            }
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            static int getDateRow(ExcelWorksheet xl_ws , string _user_date)
            {
                int date_r = 0;
                int row2 = 3;
                ExcelWorksheet _ws = xl_ws;
                //Look for the risk free rates that corresponds to the maturity date calculated from the user's entered dates
                while (string.IsNullOrWhiteSpace(_ws.Cells[row2, 1].Value?.ToString()) == false)
                {
                    //First we find the row where the date that is equal to the maturity date (end date) entered by the user
                    DateTime ws_rates_date = getDate(_ws.Cells[row2, 1].Value.ToString());
                    var ws_rates_date_con = ws_rates_date.ToString("dd-MMM-yyyy");

                    if (ws_rates_date_con == _user_date)
                    {
                        date_r = row2;
                        break;
                    }

                    row2++;
                }
                return date_r;
            }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            static double getPercentage(ExcelWorksheet per_xl_ws, double _op_maturity, int _date_row, int _start_col)
            {
                double percent = 0;
                ExcelWorksheet percent_ws = per_xl_ws;

                int col2 = _start_col;
                //double risk_free = 0;

                //int date_row = getDateRow(ws_rates, date);

                while (string.IsNullOrWhiteSpace(percent_ws.Cells[_date_row, col2].Value?.ToString()) == false)
                {
                    //Pick out the risk free rates that corresponds to the maturity date enterd by the user.
                    //The maturity date entered by the user may not be in the same row for the share prices and the interest rates.
                    //This is why this is done separately from the share price.

                    int rate_col = _start_col;
                    //Check whether the column that follows the current column is not empty. This allows for you to compare tenors
                    //between two tenors, for the purpose of interpolation.
                    if (string.IsNullOrWhiteSpace(percent_ws.Cells[2, col2 + 1].Value?.ToString()) == false)
                    {
                        //Check whether the days to maturity is exactly equal to the tenor in the excel file
                        if (_op_maturity == double.Parse(percent_ws.Cells[2, col2].Value.ToString()))
                        {
                            percent = double.Parse(percent_ws.Cells[_date_row, col2].Value.ToString());
                            break;
                        }
                        else if (_op_maturity == double.Parse(percent_ws.Cells[2, col2 + 1].Value.ToString()))
                        {
                            percent = double.Parse(percent_ws.Cells[_date_row, col2 + 1].Value.ToString());
                            break;
                        }
                        //In the case the maturity calculated is between two values, do a very simple interpolation: Just take the average of the two risk free rates.
                        //In the case the number of days to maturity is between two values, call the interpolation function here. Here we do a basic and take the average.
                        else if (double.Parse(percent_ws.Cells[2, col2].Value.ToString()) < _op_maturity && _op_maturity < double.Parse(percent_ws.Cells[2, col2 + 1].Value.ToString()))
                        {
                            percent = (double.Parse(percent_ws.Cells[_date_row, col2].Value.ToString()) + double.Parse(percent_ws.Cells[_date_row, col2 + 1].Value.ToString())) / 2;
                            break;
                        }
                    }
                    else
                    {
                        percent = double.Parse(percent_ws.Cells[_date_row, col2].Value.ToString());
                        break;
                    }

                    col2 += 2;
                }

                return percent;
            }

////////// This is a function to get the starting column from where the volatilities and dividends yields of a given share will begin //////////

            static int getStartCol()
            {
                int s_col = 0;
                return s_col;
            }

///The codes below will extract the share price of the share corresponding to the _Ticker_ entered by the user and the start date entered by the user
            int col = 1;
            int date_col = 1;
            int share_col = 0;


            //Pick out the date column and the share name column
            while (string.IsNullOrWhiteSpace(ws.Cells[2,col].Value?.ToString()) == false)
            {
                //Pick out the column that contains share prices of the share name entered by the user.
                if (ws.Cells[2,col].Value.ToString() == shareName )
                {
                    share_col = col;
                    break;
                }

                col++;
            }

            int row = 3;
            double share_price = 0;
            //Look for the date to the maturity the user entered in the date column in excel
            while (string.IsNullOrWhiteSpace(ws.Cells[row, date_col].Value?.ToString()) == false)
            {
                DateTime ws_date = getDate(ws.Cells[row,date_col].Value.ToString());
                var ws_date_con = ws_date.ToString("dd-MMM-yyyy");
                if (ws_date_con == date)
                {
                    share_price = Math.Round(double.Parse(ws.Cells[row, share_col].Value.ToString()),2);
                    break;
                }

                row++;
            }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////The lines of codes below extracts the risk free rates that corresponds to the start date inputed by the user.//////////////

            //int row2 = 3;
            //int date_row = 0;
            //Look for the risk free rates that corresponds to the maturity date calculated from the user's entered dates
            //while (string.IsNullOrWhiteSpace(ws_rates.Cells[row2, 1].Value?.ToString()) == false)
            //{
            //    //First we find the row where the date that is equal to the maturity date (end date) entered by the user
            //    DateTime ws_rates_date = getDate(ws_rates.Cells[row2, 1].Value.ToString());
            //    var ws_rates_date_con = ws_rates_date.ToString("dd-MMM-yyyy");

            //    if (ws_rates_date_con == date)
            //    {
            //        date_row = row2;
            //        break;
            //    }

            //    row2++;
            //}

            //int col2 = 2;
            //double risk_free = 0;

            int date_row = getDateRow(ws_rates, date);
            double risk_free = getPercentage(ws_rates, maturity, date_row, 2);

            //while (string.IsNullOrWhiteSpace(ws_rates.Cells[date_row, col2].Value?.ToString()) == false)
            //{
            //    //Pick out the risk free rates that corresponds to the maturity date enterd by the user.
            //    //The maturity date entered by the user may not be in the same row for the share prices and the interest rates.
            //    //This is why this is done separately from the share price.

            //    int rate_col = 2;
            //    //Check whether the column that follows the current column is not empty. This allows for you to compare tenors
            //    //between two tenors, for the purpose of interpolation.
            //    if (string.IsNullOrWhiteSpace(ws_rates.Cells[2, col2 + 1].Value?.ToString()) == false)
            //    {
            //        //Check whether the days to maturity is exactly equal to the tenor in the excel file
            //        if (maturity == double.Parse(ws_rates.Cells[2, col2].Value.ToString()))
            //        {
            //            risk_free = double.Parse(ws_rates.Cells[date_row, col2].Value.ToString());
            //            break;
            //        }
            //        else if (maturity == double.Parse(ws_rates.Cells[2, col2 + 1].Value.ToString()))
            //        {
            //            risk_free = double.Parse(ws_rates.Cells[date_row, col2 + 1].Value.ToString());
            //            break;
            //        }
            //        //In the case the maturity calculated is between two values, do a very simple interpolation: Just take the average of the two risk free rates.
            //        //In the case the number of days to maturity is between two values, call the interpolation function here. Here we do a basic and take the average.
            //        else if (double.Parse(ws_rates.Cells[2, col2].Value.ToString()) < maturity && maturity < double.Parse(ws_rates.Cells[2, col2 + 1].Value.ToString()))
            //        {
            //            risk_free = (double.Parse(ws_rates.Cells[date_row, col2].Value.ToString()) + double.Parse(ws_rates.Cells[date_row, col2 + 1].Value.ToString())) / 2;
            //            break;
            //        }
            //    }
            //    else
            //    {
            //        risk_free = double.Parse(ws_rates.Cells[date_row,col2].Value.ToString());
            //        break;
            //    }

            //    col2 += 2;
            //}
      
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///To get the volatilities and dividend yields, we first must know when volatility and dividend data of one share ends and of the other share begins.
            
            int col_count = 1;
            int col3 = 2;
            while (string.IsNullOrWhiteSpace(ws_vol.Cells[2,col3].Value?.ToString()) == false)
            {
                col_count++;
                col3++;
            }

////The code to get the volatilty and the dividend yield /////////////////////////////////////////////////////////////////////////////////////

            int vol_col = 2;

            //Lets pick the column from where to begin the look up
            int start_col = 0;

            while (string.IsNullOrWhiteSpace(ws_vol.Cells[1,vol_col].Value?.ToString()) == false)
            {
                //Get the first three letters of the string for comparison with the user's inputed _Ticker_.
                string xl_share = ws_vol.Cells[1,vol_col].Value.ToString();
                if (xl_share.Substring(0,3) == shareName)
                {
                    start_col = vol_col;
                    break;
                }
                vol_col = vol_col + col_count;
            }

            

            SharePriceData sharePriceData = new();
            sharePriceData.SharePrice = share_price;
            sharePriceData.riskFree = risk_free;

            result.Add(sharePriceData);
            
            return result;
        }

    }
}

